# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
  profile_pictures_directory: "%kernel.project_dir%/public/uploads/profile_pictures"
  csv_directory: "%kernel.project_dir%/public/uploads/csv"
services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: "../src/"
    exclude:
      - "../src/DependencyInjection/"
      - "../src/Entity/"
      - "../src/Kernel.php"

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    # PasswordManager service should be autowired without any manual binding
  App\EventListener\TripListener:
    tags:
      - name: kernel.event_listener
        event: trip.registration
        method: onTripRegistration

      - name: kernel.event_listener
        event: trip.unregistration
        method: onTripUnregistration

  App\EventListener\UserAccessListener:
    tags:
      - name: "kernel.event_listener"
        event: 'Symfony\Component\Security\Http\Event\CheckPassportEvent'
        method: "onCheckPassport"
        priority: 10

  App\EventListener.UserDeactivationListener:
    class: App\EventListener\UserDeactivationListener
    arguments:
      $participantRepository: '@App\Repository\ParticipantRepository'
      $logoutUrlGenerator: "@security.logout_url_generator"
      $security: "@security.helper"
      $router: "@router"

    tags:
      - name: kernel.event_listener
        event: kernel.request
        method: onKernelRequest
