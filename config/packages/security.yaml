security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Participant
                property: mail
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
                use_referer: true
            logout:
                path: app_logout
                # where to redirect after logout
                target: app_login
                
            remember_me:
                secret:   '%kernel.secret%' # required
                lifetime: 604800 # 1 week in seconds    

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

        # ROLE_USER
            #MAIN
#        - { path: ^/, roles: ROLE_USER }
            #PROFIL
        - { path: ^/profil/\d+(?:/modifier)?, roles: ROLE_USER }
        - { path: ^/ville/get-cities/\d+, roles: ROLE_USER }
        - { path: ^/groupe/, roles: ROLE_USER }
        - { path: ^/lieu/(?:get-location/\d+|\d+/ajouter), roles: ROLE_USER }
        - { path: ^/sortie/\d+/(?:modifier|supprimer|inscription|desistement|annuler), roles: ROLE_USER }
        - { path: ^/sortie/ajouter, roles: ROLE_USER }
        - { path: ^/logout, roles: ROLE_USER }

        # ROLE_ADMIN (inclut les droits de ROLE_USER à travers la hiérarchie)
        - { path: ^/profil/\d+/(?:ajouter|supprimer), roles: ROLE_ADMIN }
        - { path: ^/profil/(?:charger|participant-action|reactivate-participants)?, roles: ROLE_ADMIN }
        - { path: ^/ville/(?:ajouter)?$, roles: ROLE_ADMIN }
        - { path: ^/lieu/(?:\d+|modifier|\d+/supprimer), roles: ROLE_ADMIN }


    role_hierarchy:
        ROLE_ADMIN: ROLE_USER

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
